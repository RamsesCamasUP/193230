#Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: actividad-cs
---
#Postgres
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-postgres-vol1
  namespace: actividad-cs
spec:
  storageClassName: sc-postgres
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/postgres-vol1"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-postgres
  namespace: actividad-cs
spec:
  storageClassName: sc-postgres
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-postgres
  namespace: actividad-cs
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-postgres
  namespace: actividad-cs
data:
  postgres.user: postgres
  postgres.password: ramses
  postgres.db: postgresdb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: actividad-cs
  labels:
    app: postgres-server
spec:
  selector:
    matchLabels:
      app: postgres-server
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres-server
    spec:
      containers:
      - image: postgres:11
        name: postgres-db1
        ports:
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-db-volume1
        env:
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                name: cm-postgres
                key: postgres.user
          - name: POSTGRES_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: cm-postgres
                key: postgres.password
          - name: POSTGRES_DB
            valueFrom:
              configMapKeyRef:
                name: cm-postgres
                key: postgres.db
      volumes:
      - name: postgres-db-volume1
        persistentVolumeClaim:
           claimName: pvc-postgres
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: actividad-cs
spec:
  selector:
    app: postgres-server
  ports:
    - port: 5500
      targetPort: 5432
  type: LoadBalancer
---
#MySQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-mysql-vol1
  namespace: actividad-cs
spec:
  storageClassName: sc-mysql
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mysql-vol1"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mysql
  namespace: actividad-cs
spec:
  storageClassName: sc-mysql
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-mysql
  namespace: actividad-cs
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-mysql
  namespace: actividad-cs
data:
  mysql.user: root
  mysql.password: ramses
  mysql.db: mysqldb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: actividad-cs
  labels:
    app: mysql-server
spec:
  selector:
    matchLabels:
      app: mysql-server
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql-server
    spec:
      containers:
      - image: mysql:8
        name: mysql-db1
        ports:
        - containerPort: 3306
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-db-volume1
        env:
          - name: MYSQL_USER
            valueFrom:
              configMapKeyRef:
                name: cm-mysql
                key: mysql.user
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: cm-mysql
                key: mysql.password
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: cm-mysql
                key: mysql.db
      volumes:
      - name: mysql-db-volume1
        persistentVolumeClaim:
          claimName: pvc-mysql
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: actividad-cs
spec:
  selector:
    app: mysql-server
  ports:
    - port: 5501
      targetPort: 3306
  type: LoadBalancer
---
#MongoDB
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-mongo-vol1
  namespace: actividad-cs
spec:
  storageClassName: sc-mongo
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mongo-vol1"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mongo
  namespace: actividad-cs
  labels:
    app: mongo-server
spec:
  storageClassName: sc-mongo
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-mongo
  namespace: actividad-cs
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1 
kind: ConfigMap
metadata:
  name: cm-mongo 
  namespace: actividad-cs
  labels:
    app: mongo-server
data:
  mongo.user: "mongo"
  mongo.password: "ramses"
  mongo.db: "mongodb"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: actividad-cs
  labels:
    app: mongo-server
spec:
  selector:
    matchLabels:
      app: mongo-server
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo-server
    spec:
      containers:
      - image: mongo:4.1.7
        name: mongo-db1
        ports:
        - containerPort: 27017
          protocol: TCP
        volumeMounts:
        - mountPath: /data/db
          name: mongo-db-volume1
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            valueFrom:
              configMapKeyRef:
                name: cm-mongo
                key: mongo.user
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: cm-mongo
                key: mongo.password
          - name: MONGO_INITDB_ROOT_DB
            valueFrom:
              configMapKeyRef:
                name: cm-mongo
                key: mongo.db
      volumes:
      - name: mongo-db-volume1
        persistentVolumeClaim:
           claimName: pvc-mongo
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  namespace: actividad-cs
  labels:
    app: mongo-server
spec:
  selector:
    app: mongo-server
  ports:  
    - port: 5502
      targetPort: 27017
      protocol: TCP
  type: LoadBalancer
---
# Redis
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-redis-vol1
  namespace: actividad-cs
spec:
  storageClassName: sc-redis
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/redis-vol1"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-redis
  namespace: actividad-cs
  labels:
    app: redis-server
spec:
  storageClassName: sc-redis
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-redis
  namespace: actividad-cs
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1 
kind: ConfigMap 
metadata:
  name: cm-redis 
  namespace: actividad-cs
  labels:
    app: redis-server
data:
  redis.password: "ramses"
  redis.db: "redisdb"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: actividad-cs
  labels:
    app: redis-server
spec:
  selector:
    matchLabels:
      app: redis-server
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-server
    spec:
      containers:
      - image: redis:latest
        name: redis-db1
        ports:
        - containerPort: 6379
          protocol: TCP
        volumeMounts:
        - mountPath: /data
          name: redis-db-volume1
        env:
          - name: REDIS_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: cm-redis
                key: redis.password   
          - name: REDIS_DB
            valueFrom:
              configMapKeyRef:
                name: cm-redis
                key: redis.db
      volumes:
      - name: redis-db-volume1
        persistentVolumeClaim:
           claimName: pvc-redis
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: actividad-cs
  labels:
    app: redis-server
spec:
  selector:
    app: redis-server
  ports:  
    - port: 5503
      targetPort: 6379
      protocol: TCP
  type: LoadBalancer
---